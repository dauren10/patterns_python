'''Класс, который представляет собой интерфейс для создания компонентов системы.'''
'''
Метод абстрактной фабрики — это шаблон творческого проектирования, который позволяет вам создавать семейства связанных объектов без указания их конкретных классов. Используя метод абстрактной фабрики, у нас есть самые простые способы создания множества объектов подобного типа.
Он предоставляет способ инкапсулировать группу отдельных фабрик. По сути, здесь мы пытаемся абстрагировать создание объектов в зависимости от логики, бизнеса, выбора платформы и т. д.
Проблема, с которой мы сталкиваемся без абстрактного фабричного метода:

Представьте, что вы хотите присоединиться к одной из элитных групп GeeksforGeeks. Итак, вы пойдете туда и спросите о доступных курсах, структуре их оплаты, времени их проведения и других важных вещах. Они просто посмотрят на свою систему и предоставят вам всю необходимую информацию. Выглядит просто? Подумайте о разработчиках, как они делают систему такой организованной и как их веб-сайт такой смазывающий.

Разработчики будут создавать уникальные классы для каждого курса, которые будут содержать его свойства, такие как структура оплаты, тайминги и другие вещи. Но как они будут вызывать их и как они будут создавать экземпляры своих объектов?

Тут возникает проблема, допустим изначально на GeeksforGeeks доступно всего 3-4 курса, а потом добавили 5 новых курсов.
Таким образом, мы должны вручную создавать экземпляры их объектов, что, по мнению разработчика, не очень хорошо.'''
# Python Code for object
# oriented concepts without
# using the Abstract factory
# method in class

class DSA:

	""" Class for Data Structure and Algorithms """

	def price(self):
		return 11000

	def __str__(self):
		return "DSA"

class STL:

	"""Class for Standard Template Library"""

	def price(self):
		return 8000

	def __str__(self):
		return "STL"

class SDE:

	"""Class for Software Development Engineer"""

	def price(self):
		return 15000

	def __str__(self):
		return 'SDE'

# main method
if __name__ == "__main__":

	sde = SDE() # object for SDE class
	dsa = DSA() # object for DSA class
	stl = STL() # object for STL class

	print(f'Name of the course is {sde} and its price is {sde.price()}')
	print(f'Name of the course is {dsa} and its price is {dsa.price()}')
	print(f'Name of the course is {stl} and its price is {stl.price()}')
