'''Определяет интерфейс создания объекта через клонирование другого объекта вместо создания через конструктор.
Метод прототипа — это творческий шаблон проектирования, целью которого является сокращение количества классов, используемых для приложения. Он позволяет копировать существующие объекты независимо от конкретной реализации их классов. Как правило, здесь объект создается путем копирования прототипа экземпляра во время выполнения.
Настоятельно рекомендуется использовать метод прототипа, когда создание объекта является дорогостоящей задачей с точки зрения времени и использования ресурсов, а аналогичный объект уже существует. Этот метод позволяет скопировать исходный объект, а затем изменить его в соответствии с нашими потребностями.
Проблемы, с которыми мы сталкиваемся без метода прототипа

Предположим, у нас есть класс Shape, который создает различные формы, такие как круг, прямоугольник, квадрат и т. д., и у нас уже есть его объект. Теперь мы хотим создать точную копию этого объекта. Как пойдет рядовой разработчик?
Он/она создаст новый объект того же класса и применит все функциональные возможности исходных объектов и скопирует их значения. Но мы не можем скопировать каждое поле исходного объекта, поскольку некоторые из них могут быть закрытыми и защищенными и недоступными извне самого объекта.
На этом проблемы не закончились! вы также становитесь зависимым от кода другого класса, что, безусловно, не является хорошей практикой в ​​​​разработке программного обеспечения.

Для лучшего понимания давайте рассмотрим пример Courses At GeeksforGeeks, который предлагает такие курсы, как SDE, DSA, STL и т. д. Создание объектов для подобных курсов снова и снова — не лучшая задача для более эффективного использования ресурсов.
'''
# concrete course
class DSA():
	"""Class for Data Structures and Algorithms"""

	def Type(self):
		return "Data Structures and Algorithms"

	def __str__(self):
		return "DSA"


# concrete course
class SDE():
	"""Class for Software development Engineer"""

	def Type(self):
		return "Software Development Engineer"

	def __str__(self):
		return "SDE"


# concrete course
class STL():
	"""class for Standard Template Library of C++"""

	def Type(self):
		return "Standard Template Library"

	def __str__(self):
		return "STL"


# main method
if __name__ == "__main__":
	sde = SDE() # object for SDE
	dsa = DSA() # object for DSA
	stl = STL() # object for STL

	print(f'Name of Course: {sde} and its type: {sde.Type()}')
	print(f'Name of Course: {stl} and its type: {stl.Type()}')
	print(f'Name of Course: {dsa} and its type: {dsa.Type()}')
